################
#normalize.pl
################
#
#Perl script that performs normalization on ALL_AML_grow.train.noaffy.tmp and ALL_AML_grow.test.noaffy.tmp.
#
#For normalization, each field has a minimum field value of 20 and a maximum field value of 16,000.
#This script will replace each field that is less than 20 with 20, and each field that is greater than 16,000 with 16,000.
#For ALL_AML_grow.train.noaffy.tmp the output file generated by this program is called "ALL_AML_grow.train.norm.tmp"
#For ALL_AML_grow.test.noaffy.tmp the output file generated by this program is called "ALL_AML_grow.test.norm.tmp"
#
use strict;
use warnings;
sub normalize{
    my ($input_filename, $output_filename) = @_;
    open(my $write_file, '>', $output_filename);
    open(my $read_file, '<', $input_filename);
    my $ID_row = 1;
    while(my $row = <$read_file>){
        my $current_line = "";
        #Skip over the "ID" row in each file.
        if($ID_row == 1){
            $ID_row = 0;
            $current_line = $row;
        }
        else {
            my $skip_first_element = 1;
            foreach my $element (split(/,/,$row)){
                #Skip the first element since it's not a number.
                if($skip_first_element){
                    $skip_first_element = 0;
                    $current_line .= $element . ",";
                }
                else {
                    my $new_element = $element;
                    if($element < 20)
                        {$new_element = 20;}
                    elsif($element > 16000)
                        {$new_element = 16000;}
                    #Case 1: No newline is present, append a comma to the new element.
                    if($element !~ m/\n/)
                        {$current_line .= $new_element . ",";}
                    #Case 2: $element will be replaced by $new_element and $element had a newline character.
                    #Append a newline character to $new_element.
                    elsif($element < 20 || $element > 16000)
                        {$current_line .= $new_element . "\n";}
                    #Case 3: 20 <= $element <= 16000 and has a newline at the end.
                    #Append $element to the current_line.
                    else 
                        {$current_line .= $element;}
                }
            }
        }
        print $write_file $current_line;        
    }
    close($write_file);
    close($read_file);
}

normalize("ALL_AML_grow.train.noaffy.tmp","ALL_AML_grow.train.norm.tmp");
normalize("ALL_AML_grow.test.noaffy.tmp","ALL_AML_grow.test.norm.tmp");


